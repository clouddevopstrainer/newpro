---
- name: Setup EC2 Server with Docker, Prometheus, Grafana, and Node Exporter
  hosts: all
  become: yes

  tasks:
    # --------------------- CLEANUP OLD DOCKER SOURCES ---------------------
    - name: üî• Clean any leftover Docker repo files or entries
      shell: |
        sudo rm -f /etc/apt/sources.list.d/docker.list
        sudo rm -f /etc/apt/sources.list.d/*docker*.list
        sudo sed -i '/download.docker.com/d' /etc/apt/sources.list || true
        sudo apt-get clean
        sudo apt-get update -y
      ignore_errors: yes

    # --------------------- INSTALL DOCKER ---------------------
    - name: Install prerequisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

    - name: Ensure Docker keyring directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker‚Äôs official GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository cleanly
      shell: |
        echo \
        "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu jammy stable" \
        | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt cache after adding Docker repo
      shell: sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/docker.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"

    - name: Install Docker and Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Enable and start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker installation
      shell: docker --version
      register: docker_version
      changed_when: false

    - debug:
        msg: "‚úÖ Docker installed successfully: {{ docker_version.stdout }}"

    # --------------------- CLEANUP OLD MONITORING STACK ---------------------
    - name: üßπ Free ports used by Prometheus, Grafana, and Node Exporter
      shell: |
        for port in 9090 3000 9100; do
          pid=$(sudo lsof -t -i:$port || true)
          if [ -n "$pid" ]; then
            echo "‚ö†Ô∏è Killing process on port $port..."
            sudo kill -9 $pid || true
          fi
        done
      ignore_errors: yes

    - name: üßπ Remove any existing Prometheus, Grafana, or Node Exporter containers
      shell: |
        for name in prometheus grafana node-exporter; do
          if sudo docker ps -a --format '{{"{{.Names}}"}}' | grep -q "$name"; then
            echo "üß© Removing old container: $name"
            sudo docker stop $name && sudo docker rm $name || true
          fi
        done
      ignore_errors: yes

    # --------------------- CREATE MONITORING STACK FILES ---------------------
    - name: Ensure /opt/monitoring directory exists
      file:
        path: /opt/monitoring
        state: directory
        mode: '0755'

    - name: Copy Prometheus configuration file
      copy:
        dest: /opt/monitoring/prometheus.yml
        content: |
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']
            - job_name: 'node_exporter'
              static_configs:
                - targets: ['localhost:9100']

    - name: Copy docker-compose.yml for monitoring stack
      copy:
        dest: /opt/monitoring/docker-compose.yml
        content: |
          services:
            prometheus:
              image: prom/prometheus
              container_name: prometheus
              ports:
                - "9090:9090"
              volumes:
                - /opt/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
              restart: always

            grafana:
              image: grafana/grafana
              container_name: grafana
              ports:
                - "3000:3000"
              environment:
                - GF_SECURITY_ADMIN_USER=admin
                - GF_SECURITY_ADMIN_PASSWORD=admin
              restart: always

            node-exporter:
              image: prom/node-exporter
              container_name: node-exporter
              ports:
                - "9100:9100"
              restart: always

    # --------------------- START MONITORING STACK ---------------------
    - name: üöÄ Start monitoring stack (Prometheus, Grafana, Node Exporter)
      become: yes
      shell: |
        set -e
        MONITORING_DIR=/opt/monitoring
        sudo mkdir -p $MONITORING_DIR
        cd $MONITORING_DIR

        echo "üßπ Cleaning up old monitoring containers and freeing ports..."
        # Stop and remove old containers
        sudo docker ps -a --format '{{.Names}}' | grep -E 'monitoring-|prometheus|grafana|node-exporter' | xargs -r sudo docker rm -f || true

        # Free ports
        for port in 3000 9090 9100; do
          pid=$(sudo lsof -t -i:$port || true)
          if [ -n "$pid" ]; then
            echo "‚ö†Ô∏è Killing process using port $port (PID: $pid)"
            sudo kill -9 $pid || true
          fi
        done

        # Clean Docker networks, volumes, system
        sudo docker network prune -f || true
        sudo docker volume prune -f || true
        sudo docker system prune -f || true

        echo "üöÄ Deploying fresh monitoring stack..."
        sudo docker compose up -d --remove-orphans

        echo "‚úÖ Docker containers running:"
        sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
      args:
        chdir: /opt/monitoring
      ignore_errors: no
