---
- name: Setup EC2 Server
  hosts: all
  become: yes

  tasks:
    - name: ðŸ”¥ Clean any leftover Docker repo files or entries
      shell: |
        sudo rm -f /etc/apt/sources.list.d/docker.list
        sudo rm -f /etc/apt/sources.list.d/*docker*.list
        sudo sed -i '/download.docker.com/d' /etc/apt/sources.list || true
        sudo apt-get clean
        sudo apt-get update -y
      ignore_errors: yes

    - name: Install prerequisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes

    - name: Ensure Docker keyring directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Dockerâ€™s official GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository cleanly
      shell: |
        echo \
        "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] \
        https://download.docker.com/linux/ubuntu jammy stable" \
        | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt cache after adding Docker repo
      shell: sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/docker.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"

    - name: Install Docker and Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present

    - name: Enable and start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker installation
      shell: docker --version
      register: docker_version
      changed_when: false

    - debug:
        msg: "âœ… Docker installed successfully: {{ docker_version.stdout }}"

    # ---------------------------------------------------------------------
    # ðŸ§© Monitoring Section (auto-fix Prometheus port conflict)
    # ---------------------------------------------------------------------

    - name: Check if port 9090 is in use
      shell: "sudo lsof -t -i:9090 || true"
      register: prometheus_port_pid

    - name: Stop process using port 9090 (if any)
      shell: "sudo kill -9 {{ prometheus_port_pid.stdout }}"
      when: prometheus_port_pid.stdout != ""
      ignore_errors: yes

    - name: Stop old Prometheus container (if exists)
      shell: |
        if sudo docker ps --format '{{"{{.Names}}"}}' | grep -q "prometheus"; then
          sudo docker stop prometheus
          sudo docker rm prometheus
        fi
      ignore_errors: yes

    - name: Start monitoring stack (Prometheus, Grafana, Node Exporter)
      shell: |
        mkdir -p /opt/monitoring
        cd /opt/monitoring

        # Create docker-compose.yml
        cat > docker-compose.yml <<EOF
        version: "3"
        services:
          prometheus:
            image: prom/prometheus
            ports:
              - "9090:9090"
            volumes:
              - ./prometheus.yml:/etc/prometheus/prometheus.yml
            restart: always

          grafana:
            image: grafana/grafana
            ports:
              - "3000:3000"
            restart: always

          node_exporter:
            image: prom/node-exporter
            ports:
              - "9100:9100"
            restart: always
        EOF

        # Prometheus config file
        cat > prometheus.yml <<EOF
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: "prometheus"
            static_configs:
              - targets: ["localhost:9090"]
          - job_name: "node_exporter"
            static_configs:
              - targets: ["localhost:9100"]
        EOF

        sudo docker compose up -d

