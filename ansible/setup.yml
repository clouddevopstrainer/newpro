---
- name: ðŸš€ Deploy Monitoring + Application Stack
  hosts: all
  become: yes

  tasks:

    # --- Setup base directory ---
    - name: Ensure /opt/app and /opt/monitoring directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /opt/app
        - /opt/monitoring

    # --- Install Java ---
    - name: Install Java if not already installed
      ansible.builtin.shell: |
        if ! command -v java &> /dev/null; then
          sudo apt update -y
          sudo apt install -y openjdk-17-jdk
        fi
        java -version
      args:
        executable: /bin/bash

    # --- Firewall rules ---
    - name: Allow required ports (8080, 9090, 3000, 9100)
      ansible.builtin.shell: |
        sudo ufw allow 8080 || true
        sudo ufw allow 9090 || true
        sudo ufw allow 3000 || true
        sudo ufw allow 9100 || true
        sudo ufw reload || true
      args:
        executable: /bin/bash

    # --- Stop old monitoring containers ---
    - name: Stop old monitoring containers
      ansible.builtin.shell: |
        containers=$(sudo docker ps -a --format '{{"{{.Names}}"}}' | grep -E 'monitoring-|prometheus|grafana|node_exporter' || true)
        if [ -n "$containers" ]; then
          echo "ðŸ§¹ Removing old monitoring containers..."
          echo "$containers" | xargs -r sudo docker rm -f
        fi
      args:
        executable: /bin/bash

    - name: Remove old Docker networks and volumes
      ansible.builtin.shell: |
        sudo docker network prune -f || true
        sudo docker volume prune -f || true
        sudo docker system prune -f || true
      args:
        executable: /bin/bash

    # --- Monitoring Config ---
    - name: Copy Prometheus configuration
      copy:
        dest: /opt/monitoring/prometheus.yml
        content: |
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['prometheus:9090']
            - job_name: 'node_exporter'
              static_configs:
                - targets: ['node-exporter:9100']

    - name: Copy Docker Compose for monitoring
      copy:
        dest: /opt/monitoring/docker-compose.yml
        content: |
          version: "3"
          services:
            prometheus:
              image: prom/prometheus
              container_name: monitoring-prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
              restart: always

            grafana:
              image: grafana/grafana
              container_name: monitoring-grafana
              ports:
                - "3000:3000"
              environment:
                - GF_SECURITY_ADMIN_USER=admin
                - GF_SECURITY_ADMIN_PASSWORD=admin
              restart: always

            node-exporter:
              image: prom/node-exporter
              container_name: monitoring-node_exporter
              ports:
                - "9100:9100"
              volumes:
                - /proc:/host/proc:ro
                - /sys:/host/sys:ro
                - /:/rootfs:ro
              command:
                - '--path.procfs=/host/proc'
                - '--path.sysfs=/host/sys'
                - '--path.rootfs=/rootfs'
              restart: always

    - name: Start monitoring stack
      ansible.builtin.shell: |
        cd /opt/monitoring
        sudo docker compose up -d --remove-orphans
        echo "âœ… Monitoring stack deployed successfully"
      args:
        executable: /bin/bash

    # --- Deploy Spring Boot app ---
    - name: Copy application JAR
      copy:
        src: /var/lib/jenkins/workspace/Pipelinejob/target/springboot-app-1.0.0.jar
        dest: /opt/app/springboot-app.jar
        mode: '0755'

    - name: Create systemd service for Spring Boot
      copy:
        dest: /etc/systemd/system/springboot-app.service
        content: |
          [Unit]
          Description=Spring Boot Application
          After=network.target

          [Service]
          User=ubuntu
          ExecStart=/usr/bin/env java -jar /opt/app/springboot-app.jar
          SuccessExitStatus=143
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          Environment=SERVER_PORT=8080
          Environment=SERVER_ADDRESS=0.0.0.0

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and start the Spring Boot service
      ansible.builtin.shell: |
        sudo systemctl daemon-reload
        sudo systemctl enable springboot-app
        sudo systemctl restart springboot-app
        sudo systemctl status springboot-app --no-pager
      args:
        executable: /bin/bash

    - name: Verify app is running
      uri:
        url: "http://localhost:8080/api/hello"
        return_content: yes
      register: app_response
      retries: 5
      delay: 5
      until: app_response.status == 200

    - name: Print success message
      debug:
        msg: "âœ… Application & Monitoring Stack deployed successfully and accessible externally!"
